// Mocks generated by Mockito 5.4.6 from annotations
// in book_finder/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:convert' as _i13;
import 'dart:typed_data' as _i14;

import 'package:book_finder/data/datasources/book_local_data_source.dart'
    as _i11;
import 'package:book_finder/data/datasources/book_remote_data_source.dart'
    as _i9;
import 'package:book_finder/data/datasources/database_helper.dart' as _i12;
import 'package:book_finder/data/models/book_search/book_search_model.dart'
    as _i10;
import 'package:book_finder/domain/models/book_search/book.dart' as _i7;
import 'package:book_finder/domain/repositories/book_repository.dart' as _i4;
import 'package:book_finder/utils/result.dart' as _i6;
import 'package:http/http.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeResponse_1 extends _i1.SmartFake implements _i3.Response {
  _FakeResponse_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamedResponse_2 extends _i1.SmartFake
    implements _i3.StreamedResponse {
  _FakeStreamedResponse_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [BookRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookRepository extends _i1.Mock implements _i4.BookRepository {
  MockBookRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i6.Result<List<_i7.Book>>> getBooks(String? title, int? page) =>
      (super.noSuchMethod(
            Invocation.method(#getBooks, [title, page]),
            returnValue: _i5.Future<_i6.Result<List<_i7.Book>>>.value(
              _i8.dummyValue<_i6.Result<List<_i7.Book>>>(
                this,
                Invocation.method(#getBooks, [title, page]),
              ),
            ),
          )
          as _i5.Future<_i6.Result<List<_i7.Book>>>);

  @override
  _i5.Future<_i6.Result<void>> saveBook(_i7.Book? book) =>
      (super.noSuchMethod(
            Invocation.method(#saveBook, [book]),
            returnValue: _i5.Future<_i6.Result<void>>.value(
              _i8.dummyValue<_i6.Result<void>>(
                this,
                Invocation.method(#saveBook, [book]),
              ),
            ),
          )
          as _i5.Future<_i6.Result<void>>);

  @override
  _i5.Future<_i6.Result<void>> deleteBook(_i7.Book? book) =>
      (super.noSuchMethod(
            Invocation.method(#deleteBook, [book]),
            returnValue: _i5.Future<_i6.Result<void>>.value(
              _i8.dummyValue<_i6.Result<void>>(
                this,
                Invocation.method(#deleteBook, [book]),
              ),
            ),
          )
          as _i5.Future<_i6.Result<void>>);

  @override
  _i5.Future<_i6.Result<bool>> isBookSaved(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#isBookSaved, [key]),
            returnValue: _i5.Future<_i6.Result<bool>>.value(
              _i8.dummyValue<_i6.Result<bool>>(
                this,
                Invocation.method(#isBookSaved, [key]),
              ),
            ),
          )
          as _i5.Future<_i6.Result<bool>>);

  @override
  _i5.Future<_i6.Result<String>> getBookDescription(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getBookDescription, [key]),
            returnValue: _i5.Future<_i6.Result<String>>.value(
              _i8.dummyValue<_i6.Result<String>>(
                this,
                Invocation.method(#getBookDescription, [key]),
              ),
            ),
          )
          as _i5.Future<_i6.Result<String>>);
}

/// A class which mocks [BookRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookRemoteDataSource extends _i1.Mock
    implements _i9.BookRemoteDataSource {
  MockBookRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i10.BookPreview>> getBooks(String? title, int? page) =>
      (super.noSuchMethod(
            Invocation.method(#getBooks, [title, page]),
            returnValue: _i5.Future<List<_i10.BookPreview>>.value(
              <_i10.BookPreview>[],
            ),
          )
          as _i5.Future<List<_i10.BookPreview>>);

  @override
  _i5.Future<String> getBookDescription(String? bookKey) =>
      (super.noSuchMethod(
            Invocation.method(#getBookDescription, [bookKey]),
            returnValue: _i5.Future<String>.value(
              _i8.dummyValue<String>(
                this,
                Invocation.method(#getBookDescription, [bookKey]),
              ),
            ),
          )
          as _i5.Future<String>);
}

/// A class which mocks [BookLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookLocalDataSource extends _i1.Mock
    implements _i11.BookLocalDataSource {
  MockBookLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> saveBook(_i7.Book? book) =>
      (super.noSuchMethod(
            Invocation.method(#saveBook, [book]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> deleteBook(_i7.Book? book) =>
      (super.noSuchMethod(
            Invocation.method(#deleteBook, [book]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> isBookSaved(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#isBookSaved, [key]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i12.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Database> get database =>
      (super.noSuchMethod(
            Invocation.getter(#database),
            returnValue: _i5.Future<_i2.Database>.value(
              _FakeDatabase_0(this, Invocation.getter(#database)),
            ),
          )
          as _i5.Future<_i2.Database>);

  @override
  _i5.Future<void> saveBook(_i7.Book? book) =>
      (super.noSuchMethod(
            Invocation.method(#saveBook, [book]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> deleteBook(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#deleteBook, [key]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> isBookSaved(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#isBookSaved, [key]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i3.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#head, [url], {#headers: headers}),
            returnValue: _i5.Future<_i3.Response>.value(
              _FakeResponse_1(
                this,
                Invocation.method(#head, [url], {#headers: headers}),
              ),
            ),
          )
          as _i5.Future<_i3.Response>);

  @override
  _i5.Future<_i3.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#get, [url], {#headers: headers}),
            returnValue: _i5.Future<_i3.Response>.value(
              _FakeResponse_1(
                this,
                Invocation.method(#get, [url], {#headers: headers}),
              ),
            ),
          )
          as _i5.Future<_i3.Response>);

  @override
  _i5.Future<_i3.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i13.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #post,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i5.Future<_i3.Response>.value(
              _FakeResponse_1(
                this,
                Invocation.method(
                  #post,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i5.Future<_i3.Response>);

  @override
  _i5.Future<_i3.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i13.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #put,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i5.Future<_i3.Response>.value(
              _FakeResponse_1(
                this,
                Invocation.method(
                  #put,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i5.Future<_i3.Response>);

  @override
  _i5.Future<_i3.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i13.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #patch,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i5.Future<_i3.Response>.value(
              _FakeResponse_1(
                this,
                Invocation.method(
                  #patch,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i5.Future<_i3.Response>);

  @override
  _i5.Future<_i3.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i13.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #delete,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i5.Future<_i3.Response>.value(
              _FakeResponse_1(
                this,
                Invocation.method(
                  #delete,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i5.Future<_i3.Response>);

  @override
  _i5.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#read, [url], {#headers: headers}),
            returnValue: _i5.Future<String>.value(
              _i8.dummyValue<String>(
                this,
                Invocation.method(#read, [url], {#headers: headers}),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<_i14.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readBytes, [url], {#headers: headers}),
            returnValue: _i5.Future<_i14.Uint8List>.value(_i14.Uint8List(0)),
          )
          as _i5.Future<_i14.Uint8List>);

  @override
  _i5.Future<_i3.StreamedResponse> send(_i3.BaseRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#send, [request]),
            returnValue: _i5.Future<_i3.StreamedResponse>.value(
              _FakeStreamedResponse_2(
                this,
                Invocation.method(#send, [request]),
              ),
            ),
          )
          as _i5.Future<_i3.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
    Invocation.method(#close, []),
    returnValueForMissingStub: null,
  );
}
